name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11', '3.12']

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"

    - name: Run linting with ruff
      run: |
        ruff check src/ tests/

    - name: Run code formatting check with black
      run: |
        black --check src/ tests/

    - name: Run type checking with mypy
      run: |
        mypy src/

    - name: Run tests with pytest
      run: |
        pytest tests/ -v --cov=src/proxmox_mcp --cov-report=xml --cov-report=term-missing

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"

    - name: Run security checks with safety
      run: |
        pip install safety
        safety check

    - name: Run dependency check
      run: |
        pip install pip-audit
        pip-audit

  integration:
    runs-on: ubuntu-latest
    needs: test
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"

    - name: Test MCP server startup
      run: |
        cd src
        timeout 10s python -c "
        import os
        import sys
        import tempfile
        import json
        
        # Create a minimal test config
        config = {
            'proxmox': {
                'host': 'test.example.com',
                'port': 8006,
                'verify_ssl': False,
                'service': 'PVE'
            },
            'auth': {
                'user': 'test@pam',
                'token_name': 'test',
                'token_value': 'test-token'
            },
            'logging': {
                'level': 'ERROR'
            }
        }
        
        with tempfile.NamedTemporaryFile(mode='w', suffix='.json', delete=False) as f:
            json.dump(config, f)
            config_path = f.name
        
        os.environ['PROXMOX_MCP_CONFIG'] = config_path
        
        try:
            from proxmox_mcp.server import ProxmoxMCPServer
            print('✅ Server class imported successfully')
            
            # Test config loading (this will fail at Proxmox connection, which is expected)
            try:
                server = ProxmoxMCPServer(config_path)
                print('❌ Unexpected success - should fail at Proxmox connection')
            except Exception as e:
                if 'connection' in str(e).lower() or 'resolve' in str(e).lower():
                    print('✅ Expected connection failure (test environment)')
                else:
                    print(f'❌ Unexpected error: {e}')
                    sys.exit(1)
            
        finally:
            os.unlink(config_path)
        " || true