name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write
  packages: write

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Get version
      id: version
      run: |
        VERSION=${GITHUB_REF#refs/tags/v}
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Version: $VERSION"

    - name: Update version in pyproject.toml
      run: |
        sed -i 's/version = ".*"/version = "${{ steps.version.outputs.version }}"/' pyproject.toml

    - name: Build package
      run: |
        python -m build

    - name: Check package
      run: |
        twine check dist/*

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist
        path: dist/

  test-package:
    runs-on: ubuntu-latest
    needs: build
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11', '3.12']

    steps:
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist
        path: dist/

    - name: Test package installation
      run: |
        pip install dist/*.whl
        python -c "import proxmox_mcp; print('âœ… Package imports successfully')"

  release:
    runs-on: ubuntu-latest
    needs: [build, test-package]
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist
        path: dist/

    - name: Generate changelog
      id: changelog
      run: |
        # Get the previous tag
        PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
        CURRENT_TAG=${GITHUB_REF#refs/tags/}
        
        echo "## Changes in $CURRENT_TAG" > CHANGELOG.md
        echo "" >> CHANGELOG.md
        
        if [ -n "$PREVIOUS_TAG" ]; then
          echo "**Full Changelog**: [\`$PREVIOUS_TAG...$CURRENT_TAG\`](https://github.com/${{ github.repository }}/compare/$PREVIOUS_TAG...$CURRENT_TAG)" >> CHANGELOG.md
          echo "" >> CHANGELOG.md
          
          # Get commits since last tag
          git log --pretty=format:"- %s (%an)" $PREVIOUS_TAG..HEAD >> CHANGELOG.md
        else
          echo "- Initial release" >> CHANGELOG.md
        fi
        
        echo "" >> CHANGELOG.md
        echo "## Installation" >> CHANGELOG.md
        echo "" >> CHANGELOG.md
        echo "### Docker" >> CHANGELOG.md
        echo "\`\`\`bash" >> CHANGELOG.md
        echo "docker run -v \$(pwd)/config.json:/app/config.json ghcr.io/${{ github.repository }}:${{ needs.build.outputs.version }}" >> CHANGELOG.md
        echo "\`\`\`" >> CHANGELOG.md
        echo "" >> CHANGELOG.md
        echo "### Python Package" >> CHANGELOG.md
        echo "\`\`\`bash" >> CHANGELOG.md
        echo "pip install proxmox-mcp==${{ needs.build.outputs.version }}" >> CHANGELOG.md
        echo "\`\`\`" >> CHANGELOG.md

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ github.ref_name }}
        name: Release ${{ needs.build.outputs.version }}
        body_path: CHANGELOG.md
        files: |
          dist/*
        draft: false
        prerelease: ${{ contains(github.ref_name, 'alpha') || contains(github.ref_name, 'beta') || contains(github.ref_name, 'rc') }}

  docker-release:
    runs-on: ubuntu-latest
    needs: [build, test-package]
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ github.repository }}
        tags: |
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=raw,value=latest

    - name: Create Dockerfile
      run: |
        cat > Dockerfile << 'EOF'
        FROM python:3.11-slim

        ENV PYTHONUNBUFFERED=1 \
            PYTHONDONTWRITEBYTECODE=1 \
            PIP_NO_CACHE_DIR=1

        RUN apt-get update && apt-get install -y \
            git \
            build-essential \
            && rm -rf /var/lib/apt/lists/*

        RUN groupadd -r proxmox && useradd -r -g proxmox proxmox

        WORKDIR /app

        COPY pyproject.toml setup.py ./
        COPY src/ ./src/

        RUN pip install --upgrade pip && \
            pip install -e .

        RUN mkdir -p /app/config && chown proxmox:proxmox /app/config

        USER proxmox
        EXPOSE 8080

        CMD ["python", "-m", "proxmox_mcp.server"]
        EOF

    - name: Build and push release image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        platforms: linux/amd64,linux/arm64
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Uncomment when ready to publish to PyPI
  # pypi-release:
  #   runs-on: ubuntu-latest
  #   needs: [build, test-package]
  #   environment: pypi
  #   
  #   steps:
  #   - name: Download build artifacts
  #     uses: actions/download-artifact@v4
  #     with:
  #       name: dist
  #       path: dist/
  #       
  #   - name: Publish to PyPI
  #     uses: pypa/gh-action-pypi-publish@release/v1
  #     with:
  #       password: ${{ secrets.PYPI_API_TOKEN }}