name: Docker Build

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Create Dockerfile
      run: |
        cat > Dockerfile << 'EOF'
        # Multi-stage Dockerfile for ProxmoxMCP Server
        FROM python:3.11-slim as base

        # Set environment variables
        ENV PYTHONUNBUFFERED=1 \
            PYTHONDONTWRITEBYTECODE=1 \
            PIP_NO_CACHE_DIR=1 \
            PIP_DISABLE_PIP_VERSION_CHECK=1

        # Install system dependencies
        RUN apt-get update && apt-get install -y \
            git \
            build-essential \
            && rm -rf /var/lib/apt/lists/*

        # Create non-root user
        RUN groupadd -r proxmox && useradd -r -g proxmox proxmox

        # Set working directory
        WORKDIR /app

        # Copy requirements first for better caching
        COPY pyproject.toml setup.py ./
        COPY src/ ./src/

        # Install Python dependencies
        RUN pip install --upgrade pip && \
            pip install -e .

        # Development stage
        FROM base as development
        RUN pip install -e ".[dev]"
        USER proxmox
        EXPOSE 8080
        CMD ["python", "-m", "proxmox_mcp.server"]

        # Production stage
        FROM base as production
        
        # Copy application code
        COPY --chown=proxmox:proxmox . .

        # Create config directory
        RUN mkdir -p /app/config && chown proxmox:proxmox /app/config

        # Health check
        HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
            CMD python -c "import requests; requests.get('http://localhost:8080/health', timeout=5)" || exit 1

        # Switch to non-root user
        USER proxmox

        # Expose port
        EXPOSE 8080

        # Set default command
        CMD ["python", "-m", "proxmox_mcp.server"]
        EOF

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        platforms: linux/amd64,linux/arm64
        target: production
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build development image
      if: github.event_name != 'pull_request'
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:dev
        platforms: linux/amd64,linux/arm64
        target: development
        cache-from: type=gha
        cache-to: type=gha,mode=max

  security-scan:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name != 'pull_request'
    steps:
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'